name: build-pipeline

permissions:
  contents: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  repo: sr79979
  build_number: ${{ github.run_number }}
  PROJECTS: "youtube-clone band-booking"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_projects: ${{ steps.set-changed-projects.outputs.changed_projects }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changes
        id: set-changed-projects
        run: |
          CHANGED=()
          for project in $PROJECTS; do
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^$project/"; then
              CHANGED+=("\"$project\"")
            fi
          done
          MATRIX_JSON="[$(IFS=,; echo "${CHANGED[*]}")]"
          echo "Changed Projects Matrix: $MATRIX_JSON"
          echo "changed_projects=$MATRIX_JSON" >> $GITHUB_OUTPUT

          CHANGED_STR="${CHANGED[*]}"
          echo "Changed Projects String: $CHANGED_STR"
          echo "changed_projects_str=$CHANGED_STR" >> $GITHUB_OUTPUT

  build:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.changed_projects) }}
    steps:
      - uses: actions/checkout@v4
      - name: Build ${{ matrix.project }}
        run: |
          set -ex
          if [ "${{ matrix.project }}" == "band-booking" ]; then
            cd ${{ matrix.project }}
            mvn clean package
            cd ..
          fi
          cd ${{ matrix.project }}
          echo "Building Docker image for ${{ matrix.project }}"
          docker build . -f Dockerfile -t ${{ matrix.project }}:${{ env.build_number }}
          echo "Built Docker image for ${{ matrix.project }}:${{ env.build_number }}"
          cd ..
          docker save ${{ matrix.project }}:${{ env.build_number }} -o ${{ matrix.project }}.tar
          ls -lart
      - name: List uploaded artifacts
        run: |
          echo "Uploaded artifact for ${{ matrix.project }}"
          ls -lart
      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ matrix.project }}
          path: ${{ matrix.project }}.tar

  scan:
    needs: [detect-changes, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.changed_projects) }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ matrix.project }}
          path: .
      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.62.1/trivy_0.62.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.62.1_Linux-64bit.deb
      - name: Scan ${{ matrix.project }}
        run: |
          trivy image --format table --input ${{ matrix.project }}.tar --output scan_${{ matrix.project }}.md || true
          grep -E 'Total:|HIGH:|CRITICAL:' scan_${{ matrix.project }}.md > scan_summary_${{ matrix.project }}.md || echo "No vulnerabilities found!" > scan_summary_${{ matrix.project }}.md
      - name: Upload Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ matrix.project }}
          path: scan_*.md

  push:
    needs: [detect-changes, scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.changed_projects) }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ matrix.project }}
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: security-scan-${{ matrix.project }}
          path: .
      - name: Load Docker Image
        run: docker load -i ${{ matrix.project }}.tar
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push if Safe
        run: |
          HIGH=$(grep -oP 'HIGH:\s+\K\d+' scan_summary_${{ matrix.project }}.md | awk '{s+=$1} END {print s+0}')
          CRITICAL=$(grep -oP 'CRITICAL:\s+\K\d+' scan_summary_${{ matrix.project }}.md | awk '{s+=$1} END {print s+0}')
          if [ "$HIGH" -gt 0 ] || [ "$CRITICAL" -gt 0 ]; then
            echo "⏩ Skipping push for ${{ matrix.project }} due to vulnerabilities."
            exit 0
          fi
          docker tag ${{ matrix.project }}:${{ env.build_number }} ${{ env.repo }}/${{ matrix.project }}:${{ env.build_number }}
          docker push ${{ env.repo }}/${{ matrix.project }}:${{ env.build_number }}

  update-security-md:
    needs: [detect-changes, scan]
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     project: ${{ fromJson(needs.detect-changes.outputs.changed_projects) }}
    steps:
      - uses: actions/checkout@v4
      - name: Download All Scan Summaries
        uses: actions/download-artifact@v4
        with:
          path: .
      - name: Update SECURITY.md with Scan Summary
        if: github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/release/'))
        run: |
          set -x
          CHANGED_PROJECTS="${{ needs.detect-changes.outputs.changed_projects_str }}"
          echo "Changed Projects: $CHANGED_PROJECTS"
          if [ -z "$CHANGED_PROJECTS" ]; then
            echo "No changed projects detected. Exiting."
            exit 0
          fi  
          echo "# 🛡️ Docker Image Scan Summary" > SECURITY.md
          echo "**Build #${{ env.build_number }} - $(date -u +"%Y-%m-%d %H:%M:%S UTC")**" >> SECURITY.md
          echo "" >> SECURITY.md

          for project in $CHANGED_PROJECTS; do
            TOTAL=$(grep -oP 'Total:\s+\K\d+' scan_summary_${project}.md | awk '{s+=$1} END {print s+0}')
            UNKNOWN=$(grep -oP 'UNKNOWN:\s+\K\d+' scan_summary_${project}.md | awk '{s+=$1} END {print s+0}')
            LOW=$(grep -oP 'LOW:\s+\K\d+' scan_summary_${project}.md | awk '{s+=$1} END {print s+0}')
            MEDIUM=$(grep -oP 'MEDIUM:\s+\K\d+' scan_summary_${project}.md | awk '{s+=$1} END {print s+0}')
            HIGH=$(grep -oP 'HIGH:\s+\K\d+' scan_summary_${project}.md | awk '{s+=$1} END {print s+0}')
            CRITICAL=$(grep -oP 'CRITICAL:\s+\K\d+' scan_summary_${project}.md | awk '{s+=$1} END {print s+0}')
            echo "## $project Docker Image" >> SECURITY.md
            echo "Image: \`${{ env.repo }}/$project:${{ env.build_number }}\`" >> SECURITY.md
            cat >> SECURITY.md <<EOF
          | Severity   | Count |
          |------------|------:|
          | 🔵 UNKNOWN  | ${UNKNOWN} |
          | 🟢 LOW      | ${LOW} |
          | 🟡 MEDIUM   | ${MEDIUM} |
          | 🔴 HIGH     | ${HIGH} |
          | 🚨 CRITICAL | ${CRITICAL} |
          | **Total**   | ${TOTAL} |
          EOF
            echo "" >> SECURITY.md
          done
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add SECURITY.md
          git commit -m "Update SECURITY.md with scan summary for build #${{ env.build_number }}" || echo "No changes to commit"
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
          echo $BRANCH_NAME
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${BRANCH_NAME}

  release:
    needs: update-security-md
    runs-on: ubuntu-latest
    steps:
      - name: Set short SHA
        id: get_sha
        run: echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.15.0
        with:
          tag: v${{ env.build_number }}-${{ steps.get_sha.outputs.short_sha }}
          name: "Release v${{ steps.get_sha.outputs.short_sha }}"
          body: Docker image has been built and pushed.